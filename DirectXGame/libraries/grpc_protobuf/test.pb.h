// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto
// Protobuf C++ Version: 5.29.1

#ifndef test_2eproto_2epb_2eh
#define test_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_test_2eproto;
class ModelReply;
struct ModelReplyDefaultTypeInternal;
extern ModelReplyDefaultTypeInternal _ModelReply_default_instance_;
class ModelRequest;
struct ModelRequestDefaultTypeInternal;
extern ModelRequestDefaultTypeInternal _ModelRequest_default_instance_;
class SceneReply;
struct SceneReplyDefaultTypeInternal;
extern SceneReplyDefaultTypeInternal _SceneReply_default_instance_;
class SceneRequest;
struct SceneRequestDefaultTypeInternal;
extern SceneRequestDefaultTypeInternal _SceneRequest_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class SceneRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SceneRequest) */ {
 public:
  inline SceneRequest() : SceneRequest(nullptr) {}
  ~SceneRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SceneRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SceneRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SceneRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SceneRequest(const SceneRequest& from) : SceneRequest(nullptr, from) {}
  inline SceneRequest(SceneRequest&& from) noexcept
      : SceneRequest(nullptr, std::move(from)) {}
  inline SceneRequest& operator=(const SceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneRequest& operator=(SceneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneRequest* internal_default_instance() {
    return reinterpret_cast<const SceneRequest*>(
        &_SceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SceneRequest& a, SceneRequest& b) { a.Swap(&b); }
  inline void Swap(SceneRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SceneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SceneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SceneRequest& from) { SceneRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SceneRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SceneRequest"; }

 protected:
  explicit SceneRequest(::google::protobuf::Arena* arena);
  SceneRequest(::google::protobuf::Arena* arena, const SceneRequest& from);
  SceneRequest(::google::protobuf::Arena* arena, SceneRequest&& from) noexcept
      : SceneRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSceneNameFieldNumber = 1,
  };
  // string sceneName = 1;
  void clear_scenename() ;
  const std::string& scenename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scenename(Arg_&& arg, Args_... args);
  std::string* mutable_scenename();
  PROTOBUF_NODISCARD std::string* release_scenename();
  void set_allocated_scenename(std::string* value);

  private:
  const std::string& _internal_scenename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenename(
      const std::string& value);
  std::string* _internal_mutable_scenename();

  public:
  // @@protoc_insertion_point(class_scope:SceneRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SceneRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr scenename_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SceneReply final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SceneReply) */ {
 public:
  inline SceneReply() : SceneReply(nullptr) {}
  ~SceneReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SceneReply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SceneReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SceneReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline SceneReply(const SceneReply& from) : SceneReply(nullptr, from) {}
  inline SceneReply(SceneReply&& from) noexcept
      : SceneReply(nullptr, std::move(from)) {}
  inline SceneReply& operator=(const SceneReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneReply& operator=(SceneReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneReply* internal_default_instance() {
    return reinterpret_cast<const SceneReply*>(
        &_SceneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SceneReply& a, SceneReply& b) { a.Swap(&b); }
  inline void Swap(SceneReply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneReply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SceneReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SceneReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SceneReply& from) { SceneReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SceneReply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SceneReply"; }

 protected:
  explicit SceneReply(::google::protobuf::Arena* arena);
  SceneReply(::google::protobuf::Arena* arena, const SceneReply& from);
  SceneReply(::google::protobuf::Arena* arena, SceneReply&& from) noexcept
      : SceneReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSceneFileFieldNumber = 1,
  };
  // string sceneFile = 1;
  void clear_scenefile() ;
  const std::string& scenefile() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scenefile(Arg_&& arg, Args_... args);
  std::string* mutable_scenefile();
  PROTOBUF_NODISCARD std::string* release_scenefile();
  void set_allocated_scenefile(std::string* value);

  private:
  const std::string& _internal_scenefile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenefile(
      const std::string& value);
  std::string* _internal_mutable_scenefile();

  public:
  // @@protoc_insertion_point(class_scope:SceneReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      28, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SceneReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr scenefile_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ModelRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ModelRequest) */ {
 public:
  inline ModelRequest() : ModelRequest(nullptr) {}
  ~ModelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModelRequest(const ModelRequest& from) : ModelRequest(nullptr, from) {}
  inline ModelRequest(ModelRequest&& from) noexcept
      : ModelRequest(nullptr, std::move(from)) {}
  inline ModelRequest& operator=(const ModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelRequest& operator=(ModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelRequest* internal_default_instance() {
    return reinterpret_cast<const ModelRequest*>(
        &_ModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ModelRequest& a, ModelRequest& b) { a.Swap(&b); }
  inline void Swap(ModelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModelRequest& from) { ModelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ModelRequest"; }

 protected:
  explicit ModelRequest(::google::protobuf::Arena* arena);
  ModelRequest(::google::protobuf::Arena* arena, const ModelRequest& from);
  ModelRequest(::google::protobuf::Arena* arena, ModelRequest&& from) noexcept
      : ModelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModelNameFieldNumber = 1,
  };
  // string modelName = 1;
  void clear_modelname() ;
  const std::string& modelname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modelname(Arg_&& arg, Args_... args);
  std::string* mutable_modelname();
  PROTOBUF_NODISCARD std::string* release_modelname();
  void set_allocated_modelname(std::string* value);

  private:
  const std::string& _internal_modelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelname(
      const std::string& value);
  std::string* _internal_mutable_modelname();

  public:
  // @@protoc_insertion_point(class_scope:ModelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModelRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr modelname_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ModelReply final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ModelReply) */ {
 public:
  inline ModelReply() : ModelReply(nullptr) {}
  ~ModelReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModelReply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModelReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModelReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModelReply(const ModelReply& from) : ModelReply(nullptr, from) {}
  inline ModelReply(ModelReply&& from) noexcept
      : ModelReply(nullptr, std::move(from)) {}
  inline ModelReply& operator=(const ModelReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelReply& operator=(ModelReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelReply* internal_default_instance() {
    return reinterpret_cast<const ModelReply*>(
        &_ModelReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ModelReply& a, ModelReply& b) { a.Swap(&b); }
  inline void Swap(ModelReply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelReply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModelReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModelReply& from) { ModelReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModelReply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ModelReply"; }

 protected:
  explicit ModelReply(::google::protobuf::Arena* arena);
  ModelReply(::google::protobuf::Arena* arena, const ModelReply& from);
  ModelReply(::google::protobuf::Arena* arena, ModelReply&& from) noexcept
      : ModelReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kObjFileFieldNumber = 1,
    kTextureFieldNumber = 4,
    kTexWidthFieldNumber = 2,
    kTexHeightFieldNumber = 3,
  };
  // string objFile = 1;
  void clear_objfile() ;
  const std::string& objfile() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_objfile(Arg_&& arg, Args_... args);
  std::string* mutable_objfile();
  PROTOBUF_NODISCARD std::string* release_objfile();
  void set_allocated_objfile(std::string* value);

  private:
  const std::string& _internal_objfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objfile(
      const std::string& value);
  std::string* _internal_mutable_objfile();

  public:
  // bytes texture = 4;
  void clear_texture() ;
  const std::string& texture() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_texture(Arg_&& arg, Args_... args);
  std::string* mutable_texture();
  PROTOBUF_NODISCARD std::string* release_texture();
  void set_allocated_texture(std::string* value);

  private:
  const std::string& _internal_texture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture(
      const std::string& value);
  std::string* _internal_mutable_texture();

  public:
  // int32 texWidth = 2;
  void clear_texwidth() ;
  ::int32_t texwidth() const;
  void set_texwidth(::int32_t value);

  private:
  ::int32_t _internal_texwidth() const;
  void _internal_set_texwidth(::int32_t value);

  public:
  // int32 texHeight = 3;
  void clear_texheight() ;
  ::int32_t texheight() const;
  void set_texheight(::int32_t value);

  private:
  ::int32_t _internal_texheight() const;
  void _internal_set_texheight(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ModelReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModelReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr objfile_;
    ::google::protobuf::internal::ArenaStringPtr texture_;
    ::int32_t texwidth_;
    ::int32_t texheight_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModelRequest

// string modelName = 1;
inline void ModelRequest::clear_modelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.ClearToEmpty();
}
inline const std::string& ModelRequest::modelname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ModelRequest.modelName)
  return _internal_modelname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelRequest::set_modelname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ModelRequest.modelName)
}
inline std::string* ModelRequest::mutable_modelname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_modelname();
  // @@protoc_insertion_point(field_mutable:ModelRequest.modelName)
  return _s;
}
inline const std::string& ModelRequest::_internal_modelname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.modelname_.Get();
}
inline void ModelRequest::_internal_set_modelname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.Set(value, GetArena());
}
inline std::string* ModelRequest::_internal_mutable_modelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.modelname_.Mutable( GetArena());
}
inline std::string* ModelRequest::release_modelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ModelRequest.modelName)
  return _impl_.modelname_.Release();
}
inline void ModelRequest::set_allocated_modelname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.modelname_.IsDefault()) {
    _impl_.modelname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ModelRequest.modelName)
}

// -------------------------------------------------------------------

// ModelReply

// string objFile = 1;
inline void ModelReply::clear_objfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objfile_.ClearToEmpty();
}
inline const std::string& ModelReply::objfile() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ModelReply.objFile)
  return _internal_objfile();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelReply::set_objfile(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objfile_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ModelReply.objFile)
}
inline std::string* ModelReply::mutable_objfile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_objfile();
  // @@protoc_insertion_point(field_mutable:ModelReply.objFile)
  return _s;
}
inline const std::string& ModelReply::_internal_objfile() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.objfile_.Get();
}
inline void ModelReply::_internal_set_objfile(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objfile_.Set(value, GetArena());
}
inline std::string* ModelReply::_internal_mutable_objfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.objfile_.Mutable( GetArena());
}
inline std::string* ModelReply::release_objfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ModelReply.objFile)
  return _impl_.objfile_.Release();
}
inline void ModelReply::set_allocated_objfile(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objfile_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.objfile_.IsDefault()) {
    _impl_.objfile_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ModelReply.objFile)
}

// int32 texWidth = 2;
inline void ModelReply::clear_texwidth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texwidth_ = 0;
}
inline ::int32_t ModelReply::texwidth() const {
  // @@protoc_insertion_point(field_get:ModelReply.texWidth)
  return _internal_texwidth();
}
inline void ModelReply::set_texwidth(::int32_t value) {
  _internal_set_texwidth(value);
  // @@protoc_insertion_point(field_set:ModelReply.texWidth)
}
inline ::int32_t ModelReply::_internal_texwidth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.texwidth_;
}
inline void ModelReply::_internal_set_texwidth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texwidth_ = value;
}

// int32 texHeight = 3;
inline void ModelReply::clear_texheight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texheight_ = 0;
}
inline ::int32_t ModelReply::texheight() const {
  // @@protoc_insertion_point(field_get:ModelReply.texHeight)
  return _internal_texheight();
}
inline void ModelReply::set_texheight(::int32_t value) {
  _internal_set_texheight(value);
  // @@protoc_insertion_point(field_set:ModelReply.texHeight)
}
inline ::int32_t ModelReply::_internal_texheight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.texheight_;
}
inline void ModelReply::_internal_set_texheight(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texheight_ = value;
}

// bytes texture = 4;
inline void ModelReply::clear_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.ClearToEmpty();
}
inline const std::string& ModelReply::texture() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ModelReply.texture)
  return _internal_texture();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelReply::set_texture(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ModelReply.texture)
}
inline std::string* ModelReply::mutable_texture() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_texture();
  // @@protoc_insertion_point(field_mutable:ModelReply.texture)
  return _s;
}
inline const std::string& ModelReply::_internal_texture() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.texture_.Get();
}
inline void ModelReply::_internal_set_texture(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.Set(value, GetArena());
}
inline std::string* ModelReply::_internal_mutable_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.texture_.Mutable( GetArena());
}
inline std::string* ModelReply::release_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ModelReply.texture)
  return _impl_.texture_.Release();
}
inline void ModelReply::set_allocated_texture(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.texture_.IsDefault()) {
    _impl_.texture_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ModelReply.texture)
}

// -------------------------------------------------------------------

// SceneRequest

// string sceneName = 1;
inline void SceneRequest::clear_scenename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenename_.ClearToEmpty();
}
inline const std::string& SceneRequest::scenename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SceneRequest.sceneName)
  return _internal_scenename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SceneRequest::set_scenename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SceneRequest.sceneName)
}
inline std::string* SceneRequest::mutable_scenename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scenename();
  // @@protoc_insertion_point(field_mutable:SceneRequest.sceneName)
  return _s;
}
inline const std::string& SceneRequest::_internal_scenename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scenename_.Get();
}
inline void SceneRequest::_internal_set_scenename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenename_.Set(value, GetArena());
}
inline std::string* SceneRequest::_internal_mutable_scenename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.scenename_.Mutable( GetArena());
}
inline std::string* SceneRequest::release_scenename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SceneRequest.sceneName)
  return _impl_.scenename_.Release();
}
inline void SceneRequest::set_allocated_scenename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scenename_.IsDefault()) {
    _impl_.scenename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SceneRequest.sceneName)
}

// -------------------------------------------------------------------

// SceneReply

// string sceneFile = 1;
inline void SceneReply::clear_scenefile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenefile_.ClearToEmpty();
}
inline const std::string& SceneReply::scenefile() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SceneReply.sceneFile)
  return _internal_scenefile();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SceneReply::set_scenefile(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenefile_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SceneReply.sceneFile)
}
inline std::string* SceneReply::mutable_scenefile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scenefile();
  // @@protoc_insertion_point(field_mutable:SceneReply.sceneFile)
  return _s;
}
inline const std::string& SceneReply::_internal_scenefile() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scenefile_.Get();
}
inline void SceneReply::_internal_set_scenefile(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenefile_.Set(value, GetArena());
}
inline std::string* SceneReply::_internal_mutable_scenefile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.scenefile_.Mutable( GetArena());
}
inline std::string* SceneReply::release_scenefile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SceneReply.sceneFile)
  return _impl_.scenefile_.Release();
}
inline void SceneReply::set_allocated_scenefile(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scenefile_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scenefile_.IsDefault()) {
    _impl_.scenefile_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SceneReply.sceneFile)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // test_2eproto_2epb_2eh
